-- Force schema update - drop and recreate tables with correct structure

-- Drop existing tables in correct order (due to foreign key constraints)
DROP TABLE IF EXISTS quiz_attempts CASCADE;
DROP TABLE IF EXISTS quizzes CASCADE;
DROP TABLE IF EXISTS punch_records CASCADE;
DROP TABLE IF EXISTS punches CASCADE;
DROP TABLE IF EXISTS course_members CASCADE;

-- Recreate punches table with TIMESTAMPTZ
CREATE TABLE punches (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  course_id BIGINT NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
  topic TEXT NOT NULL,
  due_date TIMESTAMPTZ
);

-- Recreate punch_records table
CREATE TABLE punch_records (
  punch_id BIGINT NOT NULL REFERENCES punches(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  punched_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY (punch_id, user_id)
);

-- Recreate course_members table
CREATE TABLE course_members (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  course_id BIGINT NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  UNIQUE (course_id, user_id)
);

-- Recreate quizzes table with file_path
CREATE TABLE quizzes (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  course_id BIGINT NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  file_path TEXT,
  due_date TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Recreate quiz_attempts table
CREATE TABLE quiz_attempts (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  quiz_id BIGINT NOT NULL REFERENCES quizzes(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  score INT NOT NULL,
  submitted_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Recreate RLS policies
ALTER TABLE punches ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Course members can see punches" ON punches FOR SELECT TO authenticated USING (true);
CREATE POLICY "Course creator can manage punches" ON punches FOR ALL USING (
  auth.uid() = (SELECT creator_id FROM courses WHERE id = punches.course_id)
);

ALTER TABLE punch_records ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can see and manage their own punch records" ON punch_records FOR ALL USING (user_id = auth.uid());
CREATE POLICY "Course creator can see all punch records in their course" ON punch_records FOR SELECT USING (
  auth.uid() = (
    SELECT c.creator_id FROM courses c
    JOIN punches p ON c.id = p.course_id
    WHERE p.id = punch_records.punch_id
  )
);

ALTER TABLE course_members ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Authenticated users can see all course memberships" ON course_members FOR SELECT USING (true);
CREATE POLICY "Users can enroll in courses" ON course_members FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Course creator can update members" ON course_members FOR UPDATE USING (
  auth.uid() = (SELECT creator_id FROM courses WHERE id = course_id)
);
CREATE POLICY "Course creator can delete members" ON course_members FOR DELETE USING (
  auth.uid() = (SELECT creator_id FROM courses WHERE id = course_id)
);

ALTER TABLE quizzes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Course members can see quizzes" ON quizzes FOR SELECT TO authenticated USING (
  course_id IN (
    SELECT course_id FROM course_members WHERE user_id = auth.uid()
  )
);
CREATE POLICY "Course creator can manage quizzes" ON quizzes FOR ALL USING (
  auth.uid() = (SELECT creator_id FROM courses WHERE id = quizzes.course_id)
);

ALTER TABLE quiz_attempts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can see and manage their own quiz attempts" ON quiz_attempts FOR ALL USING (user_id = auth.uid());
CREATE POLICY "Course creator can see all quiz attempts in their course" ON quiz_attempts FOR SELECT USING (
  auth.uid() = (
    SELECT c.creator_id FROM courses c
    JOIN quizzes q ON c.id = q.course_id
    WHERE q.id = quiz_attempts.quiz_id
  )
);
